name: Build WAL-G Docker Images

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      wal_g_version:
        description: 'WAL-G version to build (e.g., v3.0.7)'
        required: false
        default: 'v3.0.7'
      
  # Schedule to check for new releases (runs daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'

  # Push to main branch
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      latest-version: ${{ steps.check.outputs.latest-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for new WAL-G release
        id: check
        run: |
          # Check if we have a manual version input
          if [ -n "${{ github.event.inputs.wal_g_version }}" ]; then
            echo "Manual trigger with version: ${{ github.event.inputs.wal_g_version }}"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "latest-version=${{ github.event.inputs.wal_g_version }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For push events, always build
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "Push event, building with default version"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "latest-version=v3.0.7" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get latest release from wal-g/wal-g
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/wal-g/wal-g/releases/latest)
          LATEST_VERSION=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          IS_PRERELEASE=$(echo "$LATEST_RELEASE" | jq -r '.prerelease')
          
          echo "Latest version: $LATEST_VERSION"
          echo "Is prerelease: $IS_PRERELEASE"
          
          # Skip if it's a prerelease
          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "Skipping prerelease $LATEST_VERSION"
            echo "should-build=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if we already have this version tagged
          if git ls-remote --tags origin | grep -q "refs/tags/$LATEST_VERSION"; then
            echo "Version $LATEST_VERSION already exists"
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "New version $LATEST_VERSION found"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-release
    if: needs.check-release.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant: [pg, mysql, mongo, redis, gp, fdb, sqlserver]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}},suffix=-${{ matrix.variant }}
            type=raw,value=${{ needs.check-release.outputs.latest-version }},suffix=-${{ matrix.variant }}
            type=raw,value=latest,enable=${{ matrix.variant == 'pg' && is_default_branch }}
            type=raw,value=${{ needs.check-release.outputs.latest-version }},enable=${{ matrix.variant == 'pg' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            WAL_G_VERSION=${{ needs.check-release.outputs.latest-version }}
            WAL_G_VARIANT=${{ matrix.variant }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  tag-release:
    needs: [check-release, build]
    if: needs.check-release.outputs.should-build == 'true' && github.event_name != 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        run: |
          VERSION="${{ needs.check-release.outputs.latest-version }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION - WAL-G Docker images"
          git push origin "$VERSION"